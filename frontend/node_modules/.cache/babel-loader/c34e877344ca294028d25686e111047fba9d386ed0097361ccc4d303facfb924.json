{"ast":null,"code":"import axios from 'axios';\n\n// NVAPI Configuration\nconst NVAPI_BASE_URL = 'https://api.nvidia.com/v1';\nconst NVAPI_KEY = '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';\n\n// Create axios instance for NVAPI\nconst nvapiClient = axios.create({\n  baseURL: NVAPI_BASE_URL,\n  headers: {\n    'Authorization': `Bearer ${NVAPI_KEY}`,\n    'Content-Type': 'application/json'\n  },\n  timeout: 30000\n});\n\n// Types for NVAPI responses\n\n// Additional types for messaging integration\n\n// NVAPI Service Class\nclass NVAPIService {\n  // Get real-time market trends for a location\n  async getMarketTrends(location, propertyType) {\n    try {\n      // Since NVAPI doesn't have direct real estate endpoints, we'll simulate\n      // the data structure that would come from a real estate AI API\n      const response = await this.simulateMarketData(location, propertyType);\n      return response;\n    } catch (error) {\n      console.error('Error fetching market trends:', error);\n      throw new Error('Failed to fetch market trends');\n    }\n  }\n\n  // Get property valuation using AI\n  async getPropertyValuation(propertyData) {\n    try {\n      // Simulate AI-powered property valuation\n      const response = await this.simulatePropertyValuation(propertyData);\n      return response;\n    } catch (error) {\n      console.error('Error getting property valuation:', error);\n      throw new Error('Failed to get property valuation');\n    }\n  }\n\n  // Get location insights and analytics\n  async getLocationInsights(location) {\n    try {\n      const response = await this.simulateLocationInsights(location);\n      return response;\n    } catch (error) {\n      console.error('Error fetching location insights:', error);\n      throw new Error('Failed to fetch location insights');\n    }\n  }\n\n  // Score leads using AI\n  async scoreLeads(leadData) {\n    try {\n      const scores = await Promise.all(leadData.map(lead => this.simulateLeadScoring(lead)));\n      return scores;\n    } catch (error) {\n      console.error('Error scoring leads:', error);\n      throw new Error('Failed to score leads');\n    }\n  }\n\n  // Generate market insights using AI\n  async generateMarketInsightsReport(location, timeframe = '30d') {\n    try {\n      return await this.simulateMarketInsights(location, timeframe);\n    } catch (error) {\n      console.error('Error generating market insights:', error);\n      throw new Error('Failed to generate market insights');\n    }\n  }\n\n  // Private methods to simulate AI responses (replace with actual NVAPI calls)\n  async simulateMarketData(location, propertyType) {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    const basePrice = this.getBasePriceForLocation(location);\n    const variation = (Math.random() - 0.5) * 0.1; // ±5% variation\n\n    return {\n      location,\n      averagePrice: Math.round(basePrice * (1 + variation)),\n      priceChange: Math.round(basePrice * variation * 0.1),\n      priceChangePercent: Number((variation * 10).toFixed(2)),\n      inventory: Math.round(Math.random() * 500 + 100),\n      daysOnMarket: Math.round(Math.random() * 60 + 20),\n      timestamp: new Date().toISOString()\n    };\n  }\n  async simulatePropertyValuation(propertyData) {\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    const baseValue = this.calculateBaseValue(propertyData);\n    const confidence = Math.random() * 0.3 + 0.7; // 70-100% confidence\n\n    return {\n      propertyId: `prop_${Date.now()}`,\n      estimatedValue: Math.round(baseValue),\n      confidence: Number(confidence.toFixed(2)),\n      comparables: this.generateComparables(propertyData, 5),\n      marketTrends: await this.simulateMarketData(propertyData.address)\n    };\n  }\n  async simulateLocationInsights(location) {\n    await new Promise(resolve => setTimeout(resolve, 1200));\n    return {\n      location,\n      walkScore: Math.round(Math.random() * 40 + 60),\n      // 60-100\n      crimeRate: Number((Math.random() * 5 + 1).toFixed(1)),\n      // 1-6 per 1000\n      schoolRating: Number((Math.random() * 3 + 7).toFixed(1)),\n      // 7-10\n      amenities: ['Shopping Centers', 'Parks', 'Public Transit', 'Restaurants', 'Schools', 'Healthcare', 'Entertainment', 'Fitness Centers'].slice(0, Math.round(Math.random() * 4 + 4)),\n      demographics: {\n        medianIncome: Math.round(Math.random() * 50000 + 50000),\n        populationGrowth: Number((Math.random() * 4 + 1).toFixed(1)),\n        ageDistribution: {\n          '18-34': Math.round(Math.random() * 15 + 20),\n          '35-54': Math.round(Math.random() * 15 + 25),\n          '55+': Math.round(Math.random() * 15 + 20)\n        }\n      },\n      futureGrowthPotential: Number((Math.random() * 30 + 70).toFixed(1))\n    };\n  }\n  async simulateLeadScoring(leadData) {\n    await new Promise(resolve => setTimeout(resolve, 800));\n    const budgetScore = Math.min(leadData.budget / 100000, 1) * 30;\n    const urgencyScore = leadData.urgency === 'high' ? 25 : leadData.urgency === 'medium' ? 15 : 5;\n    const engagementScore = Math.min(leadData.contactHistory * 5, 25);\n    const locationScore = Math.random() * 20;\n    const totalScore = Math.round(budgetScore + urgencyScore + engagementScore + locationScore);\n    return {\n      leadId: leadData.id,\n      score: totalScore,\n      factors: [{\n        factor: 'Budget',\n        impact: budgetScore,\n        description: 'Lead budget relative to market'\n      }, {\n        factor: 'Urgency',\n        impact: urgencyScore,\n        description: 'Timeline for purchase/sale'\n      }, {\n        factor: 'Engagement',\n        impact: engagementScore,\n        description: 'Communication frequency'\n      }, {\n        factor: 'Location Match',\n        impact: locationScore,\n        description: 'Location preference alignment'\n      }],\n      recommendations: this.generateLeadRecommendations(totalScore)\n    };\n  }\n  async simulateMarketInsights(location, timeframe) {\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    return {\n      insights: [`${location} market shows strong buyer demand with inventory down 15% from last month`, 'Average days on market decreased by 8 days, indicating faster sales', 'Price appreciation trending upward with 3.2% increase over last quarter', 'New construction permits up 22%, suggesting future supply increase'],\n      predictions: [{\n        metric: 'Average Price',\n        currentValue: 425000,\n        predictedValue: 441000,\n        confidence: 0.85,\n        timeframe: '3 months'\n      }, {\n        metric: 'Days on Market',\n        currentValue: 28,\n        predictedValue: 24,\n        confidence: 0.78,\n        timeframe: '3 months'\n      }, {\n        metric: 'Inventory',\n        currentValue: 245,\n        predictedValue: 280,\n        confidence: 0.72,\n        timeframe: '3 months'\n      }],\n      recommendations: ['Consider pricing competitively due to high demand', 'Prepare for faster closing timelines', 'Focus on move-in ready properties for best results', 'Monitor new construction impact on pricing']\n    };\n  }\n\n  // Helper methods\n  getBasePriceForLocation(location) {\n    const locationPrices = {\n      'chicago': 350000,\n      'naperville': 425000,\n      'schaumburg': 380000,\n      'evanston': 450000,\n      'oak_park': 400000\n    };\n    const key = location.toLowerCase().replace(/\\s+/g, '_');\n    return locationPrices[key] || 375000;\n  }\n  calculateBaseValue(propertyData) {\n    const basePrice = this.getBasePriceForLocation(propertyData.address);\n    const sqftValue = propertyData.sqft * 150; // $150 per sqft base\n    const bedroomValue = propertyData.bedrooms * 15000;\n    const bathroomValue = propertyData.bathrooms * 10000;\n    const ageAdjustment = Math.max(0, 1 - (2024 - propertyData.yearBuilt) * 0.005);\n    return (sqftValue + bedroomValue + bathroomValue) * ageAdjustment;\n  }\n  generateComparables(propertyData, count) {\n    const comparables = [];\n    for (let i = 0; i < count; i++) {\n      const variation = (Math.random() - 0.5) * 0.3; // ±15% variation\n      comparables.push({\n        address: `${Math.floor(Math.random() * 9999)} Comparable St`,\n        price: Math.round(this.calculateBaseValue(propertyData) * (1 + variation)),\n        sqft: Math.round(propertyData.sqft * (1 + variation * 0.5)),\n        bedrooms: propertyData.bedrooms + Math.floor(Math.random() * 3 - 1),\n        bathrooms: propertyData.bathrooms + Math.floor(Math.random() * 2 - 0.5),\n        distance: Number((Math.random() * 2 + 0.1).toFixed(1))\n      });\n    }\n    return comparables;\n  }\n  generateLeadRecommendations(score) {\n    if (score >= 80) {\n      return ['High priority lead - contact immediately', 'Schedule property viewing within 24 hours', 'Prepare pre-approval documentation', 'Assign dedicated agent for personalized service'];\n    } else if (score >= 60) {\n      return ['Medium priority lead - follow up within 48 hours', 'Send curated property listings', 'Schedule phone consultation', 'Provide market insights and trends'];\n    } else {\n      return ['Nurture lead with regular market updates', 'Send educational content about buying/selling process', 'Check in monthly to assess changing needs', 'Provide general market information'];\n    }\n  }\n\n  // Enhanced messaging features with AI integration\n  async generateLandAnalysisResponse(message, context) {\n    try {\n      // Parse the message for location and property details\n      const locationMatch = this.extractLocationFromMessage(message);\n      const propertyDetails = this.extractPropertyDetailsFromMessage(message);\n\n      // Simulate comprehensive land analysis using AI\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      const overallScore = Math.random() * 40 + 60; // 60-100 score\n      const confidenceLevel = Math.random() * 0.3 + 0.7; // 70-100% confidence\n\n      return {\n        analysisId: `analysis_${Date.now()}`,\n        location: locationMatch || 'Property Location',\n        overallScore: Number(overallScore.toFixed(1)),\n        recommendation: overallScore >= 80 ? 'buy' : overallScore >= 65 ? 'hold' : 'avoid',\n        confidenceLevel: Number(confidenceLevel.toFixed(2)),\n        keyFactors: this.generateKeyFactors(overallScore),\n        marketInsights: this.generateMarketInsightsArray(locationMatch || 'area'),\n        riskFactors: this.generateRiskFactors(),\n        opportunities: this.generateOpportunities(),\n        predictedValueChange: {\n          oneYear: Number((Math.random() * 10 - 2).toFixed(1)),\n          // -2% to +8%\n          threeYear: Number((Math.random() * 20 + 5).toFixed(1)),\n          // +5% to +25%\n          fiveYear: Number((Math.random() * 35 + 15).toFixed(1)) // +15% to +50%\n        },\n        comparable_properties: this.generateComparableProperties()\n      };\n    } catch (error) {\n      console.error('Error generating land analysis:', error);\n      throw new Error('Failed to generate land analysis');\n    }\n  }\n  async enhanceMessage(message, context) {\n    try {\n      const hasLandAnalysisKeywords = /\\b(location|area|neighborhood|analysis|score|rating|investment|risk)\\b/i.test(message);\n      const hasPriceAnalysisKeywords = /\\b(price|value|cost|market|trend|appreciation|comparable)\\b/i.test(message);\n      const hasMarketTrendsKeywords = /\\b(market|trend|forecast|prediction|growth|demand|supply)\\b/i.test(message);\n      const suggestedResponses = this.generateSuggestedResponses(message, context);\n      const relevantProperties = context.propertyId ? await this.getRelevantProperties(context.propertyId) : undefined;\n      return {\n        hasLandAnalysis: hasLandAnalysisKeywords,\n        hasPriceAnalysis: hasPriceAnalysisKeywords,\n        hasMarketTrends: hasMarketTrendsKeywords,\n        suggestedResponses,\n        relevantProperties\n      };\n    } catch (error) {\n      console.error('Error enhancing message:', error);\n      return {\n        hasLandAnalysis: false,\n        hasPriceAnalysis: false,\n        hasMarketTrends: false\n      };\n    }\n  }\n  async generateConversationResponse(message, context) {\n    try {\n      // Simulate AI conversation response based on user role and context\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      const responses = this.getRoleBasedResponses(context.userRole, message, context);\n      return responses[Math.floor(Math.random() * responses.length)];\n    } catch (error) {\n      console.error('Error generating conversation response:', error);\n      throw new Error('Failed to generate response');\n    }\n  }\n  extractLocationFromMessage(message) {\n    const locationPatterns = [/in\\s+([A-Za-z\\s,]+)(?=\\s|$|[.!?])/i, /at\\s+([A-Za-z\\s,]+)(?=\\s|$|[.!?])/i, /([A-Za-z\\s,]+),\\s*(IL|Illinois)/i];\n    for (const pattern of locationPatterns) {\n      const match = message.match(pattern);\n      if (match) {\n        return match[1].trim();\n      }\n    }\n    return null;\n  }\n  extractPropertyDetailsFromMessage(message) {\n    const details = {};\n    const bedroomMatch = message.match(/(\\d+)\\s*(?:bed|bedroom)/i);\n    if (bedroomMatch) details.bedrooms = parseInt(bedroomMatch[1]);\n    const bathroomMatch = message.match(/(\\d+(?:\\.\\d+)?)\\s*(?:bath|bathroom)/i);\n    if (bathroomMatch) details.bathrooms = parseFloat(bathroomMatch[1]);\n    const sqftMatch = message.match(/(\\d+(?:,\\d+)?)\\s*(?:sq\\s*ft|sqft|square\\s*feet)/i);\n    if (sqftMatch) details.sqft = parseInt(sqftMatch[1].replace(',', ''));\n    return details;\n  }\n  generateKeyFactors(overallScore) {\n    const factors = [{\n      factor: 'Safety & Crime Rate',\n      score: Math.random() * 30 + 70,\n      impact: 'positive',\n      description: 'Low crime rate with good police response times'\n    }, {\n      factor: 'School Quality',\n      score: Math.random() * 25 + 75,\n      impact: 'positive',\n      description: 'Highly rated schools in the district'\n    }, {\n      factor: 'Market Trends',\n      score: Math.random() * 40 + 60,\n      impact: 'positive',\n      description: 'Steady price appreciation over past 3 years'\n    }, {\n      factor: 'Transportation',\n      score: Math.random() * 35 + 65,\n      impact: 'positive',\n      description: 'Good public transit and highway access'\n    }, {\n      factor: 'Amenities',\n      score: Math.random() * 30 + 70,\n      impact: 'positive',\n      description: 'Shopping, dining, and recreation nearby'\n    }, {\n      factor: 'Future Development',\n      score: Math.random() * 50 + 50,\n      impact: 'neutral',\n      description: 'Planned infrastructure improvements'\n    }];\n    return factors.map(f => ({\n      ...f,\n      score: Number(f.score.toFixed(1)),\n      impact: f.score >= 75 ? 'positive' : f.score >= 60 ? 'neutral' : 'negative'\n    })).slice(0, 4);\n  }\n  generateMarketInsightsArray(location) {\n    return [`${location} has shown 8.2% price appreciation over the past year`, 'Inventory levels are 23% below historical averages, indicating strong demand', 'Average days on market decreased to 18 days, down from 32 days last year', 'New construction permits increased by 15%, suggesting growing neighborhood interest', 'Rental yields in the area average 6.8%, attractive for investment properties'];\n  }\n  generateRiskFactors() {\n    return ['Property taxes may increase due to rising assessed values', 'Traffic congestion during peak hours on main roads', 'Limited parking availability in downtown areas', 'Seasonal flooding risk in low-lying areas during heavy rains'];\n  }\n  generateOpportunities() {\n    return ['Upcoming transit expansion will improve connectivity', 'New shopping center development planned within 2 miles', 'Strong job growth in tech sector driving housing demand', 'Renovation potential to increase property value by 15-20%'];\n  }\n  generateComparableProperties() {\n    return [{\n      address: '1234 Maple Street',\n      price: 425000,\n      score: 87.5,\n      distance: 0.3\n    }, {\n      address: '5678 Oak Avenue',\n      price: 445000,\n      score: 91.2,\n      distance: 0.7\n    }, {\n      address: '9012 Pine Road',\n      price: 398000,\n      score: 82.8,\n      distance: 1.1\n    }, {\n      address: '3456 Elm Drive',\n      price: 465000,\n      score: 89.6,\n      distance: 0.9\n    }];\n  }\n  generateSuggestedResponses(message, context) {\n    const baseResponses = ['Would you like me to provide a detailed market analysis for this area?', 'I can share recent comparable sales data if that would be helpful.', 'Let me know if you\\'d like to schedule a property viewing.', 'I can provide more information about the neighborhood amenities.'];\n    if (context.userRole === 'buyer_agent' || context.userRole === 'seller_agent') {\n      return [...baseResponses, 'I can prepare a comprehensive CMA for your client.', 'Would you like me to run financing scenarios?', 'I can provide investment analysis for this property.'];\n    }\n    return baseResponses;\n  }\n  async getRelevantProperties(propertyId) {\n    // Simulate API call to get relevant properties\n    return [{\n      id: 1,\n      title: 'Beautiful 3BR Home in Naperville',\n      price: 425000,\n      score: 87.5\n    }, {\n      id: 2,\n      title: 'Modern 4BR House in Schaumburg',\n      price: 465000,\n      score: 91.2\n    }, {\n      id: 3,\n      title: 'Charming 2BR Condo in Evanston',\n      price: 298000,\n      score: 82.8\n    }];\n  }\n  getRoleBasedResponses(userRole, message, context) {\n    const responses = {\n      buyer: ['I understand you\\'re interested in this property. Let me provide you with a comprehensive analysis.', 'Based on current market conditions, this could be a good opportunity. Here\\'s what the data shows...', 'I\\'ve analyzed the neighborhood factors and market trends for you.'],\n      seller: ['I can help you understand your property\\'s market position and pricing strategy.', 'Let me provide you with a detailed market analysis to optimize your listing.', 'Based on recent sales data, here\\'s what I recommend for your property.'],\n      buyer_agent: ['I\\'ve prepared a comprehensive analysis for your client. Here are the key findings...', 'The market data suggests this could be a strong opportunity for your buyer.', 'I can provide additional comps and market insights for your client presentation.'],\n      seller_agent: ['I can help you prepare a competitive market analysis for your seller.', 'The current market trends favor sellers in this area. Here\\'s the data...', 'I\\'ve analyzed comparable sales to help you price this listing competitively.']\n    };\n    return responses[userRole] || responses.buyer;\n  }\n}\n\n// Export singleton instance\nexport const nvapiService = new NVAPIService();\nexport default nvapiService;","map":{"version":3,"names":["axios","NVAPI_BASE_URL","NVAPI_KEY","nvapiClient","create","baseURL","headers","timeout","NVAPIService","getMarketTrends","location","propertyType","response","simulateMarketData","error","console","Error","getPropertyValuation","propertyData","simulatePropertyValuation","getLocationInsights","simulateLocationInsights","scoreLeads","leadData","scores","Promise","all","map","lead","simulateLeadScoring","generateMarketInsightsReport","timeframe","simulateMarketInsights","resolve","setTimeout","basePrice","getBasePriceForLocation","variation","Math","random","averagePrice","round","priceChange","priceChangePercent","Number","toFixed","inventory","daysOnMarket","timestamp","Date","toISOString","baseValue","calculateBaseValue","confidence","propertyId","now","estimatedValue","comparables","generateComparables","marketTrends","address","walkScore","crimeRate","schoolRating","amenities","slice","demographics","medianIncome","populationGrowth","ageDistribution","futureGrowthPotential","budgetScore","min","budget","urgencyScore","urgency","engagementScore","contactHistory","locationScore","totalScore","leadId","id","score","factors","factor","impact","description","recommendations","generateLeadRecommendations","insights","predictions","metric","currentValue","predictedValue","locationPrices","key","toLowerCase","replace","sqftValue","sqft","bedroomValue","bedrooms","bathroomValue","bathrooms","ageAdjustment","max","yearBuilt","count","i","push","floor","price","distance","generateLandAnalysisResponse","message","context","locationMatch","extractLocationFromMessage","propertyDetails","extractPropertyDetailsFromMessage","overallScore","confidenceLevel","analysisId","recommendation","keyFactors","generateKeyFactors","marketInsights","generateMarketInsightsArray","riskFactors","generateRiskFactors","opportunities","generateOpportunities","predictedValueChange","oneYear","threeYear","fiveYear","comparable_properties","generateComparableProperties","enhanceMessage","hasLandAnalysisKeywords","test","hasPriceAnalysisKeywords","hasMarketTrendsKeywords","suggestedResponses","generateSuggestedResponses","relevantProperties","getRelevantProperties","undefined","hasLandAnalysis","hasPriceAnalysis","hasMarketTrends","generateConversationResponse","responses","getRoleBasedResponses","userRole","length","locationPatterns","pattern","match","trim","details","bedroomMatch","parseInt","bathroomMatch","parseFloat","sqftMatch","f","baseResponses","title","buyer","seller","buyer_agent","seller_agent","nvapiService"],"sources":["D:/py/frontend/src/services/nvapiService.ts"],"sourcesContent":["import axios, { AxiosResponse } from 'axios';\n\n// NVAPI Configuration\nconst NVAPI_BASE_URL = 'https://api.nvidia.com/v1';\nconst NVAPI_KEY = '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';\n\n// Create axios instance for NVAPI\nconst nvapiClient = axios.create({\n  baseURL: NVAPI_BASE_URL,\n  headers: {\n    'Authorization': `Bearer ${NVAPI_KEY}`,\n    'Content-Type': 'application/json',\n  },\n  timeout: 30000,\n});\n\n// Types for NVAPI responses\nexport interface MarketTrend {\n  location: string;\n  averagePrice: number;\n  priceChange: number;\n  priceChangePercent: number;\n  inventory: number;\n  daysOnMarket: number;\n  timestamp: string;\n}\n\nexport interface PropertyValuation {\n  propertyId: string;\n  estimatedValue: number;\n  confidence: number;\n  comparables: Array<{\n    address: string;\n    price: number;\n    sqft: number;\n    bedrooms: number;\n    bathrooms: number;\n    distance: number;\n  }>;\n  marketTrends: MarketTrend;\n}\n\nexport interface LocationInsights {\n  location: string;\n  walkScore: number;\n  crimeRate: number;\n  schoolRating: number;\n  amenities: string[];\n  demographics: {\n    medianIncome: number;\n    populationGrowth: number;\n    ageDistribution: Record<string, number>;\n  };\n  futureGrowthPotential: number;\n}\n\nexport interface LeadScore {\n  leadId: string;\n  score: number;\n  factors: Array<{\n    factor: string;\n    impact: number;\n    description: string;\n  }>;\n  recommendations: string[];\n}\n\n// Additional types for messaging integration\nexport interface LandAnalysisResponse {\n  analysisId: string;\n  location: string;\n  overallScore: number;\n  recommendation: 'buy' | 'hold' | 'avoid';\n  confidenceLevel: number;\n  keyFactors: Array<{\n    factor: string;\n    score: number;\n    impact: 'positive' | 'negative' | 'neutral';\n    description: string;\n  }>;\n  marketInsights: string[];\n  riskFactors: string[];\n  opportunities: string[];\n  predictedValueChange: {\n    oneYear: number;\n    threeYear: number;\n    fiveYear: number;\n  };\n  comparable_properties: Array<{\n    address: string;\n    price: number;\n    score: number;\n    distance: number;\n  }>;\n}\n\nexport interface ConversationContext {\n  propertyId?: number;\n  userId: number;\n  userRole: 'buyer' | 'seller' | 'buyer_agent' | 'seller_agent';\n  conversationHistory?: Array<{\n    role: 'user' | 'assistant';\n    content: string;\n    timestamp: string;\n  }>;\n}\n\nexport interface MessageEnhancement {\n  hasLandAnalysis: boolean;\n  hasPriceAnalysis: boolean;\n  hasMarketTrends: boolean;\n  suggestedResponses?: string[];\n  relevantProperties?: Array<{\n    id: number;\n    title: string;\n    price: number;\n    score: number;\n  }>;\n}\n\n// NVAPI Service Class\nclass NVAPIService {\n  // Get real-time market trends for a location\n  async getMarketTrends(location: string, propertyType?: string): Promise<MarketTrend> {\n    try {\n      // Since NVAPI doesn't have direct real estate endpoints, we'll simulate\n      // the data structure that would come from a real estate AI API\n      const response = await this.simulateMarketData(location, propertyType);\n      return response;\n    } catch (error) {\n      console.error('Error fetching market trends:', error);\n      throw new Error('Failed to fetch market trends');\n    }\n  }\n\n  // Get property valuation using AI\n  async getPropertyValuation(propertyData: {\n    address: string;\n    sqft: number;\n    bedrooms: number;\n    bathrooms: number;\n    yearBuilt: number;\n    lotSize?: number;\n  }): Promise<PropertyValuation> {\n    try {\n      // Simulate AI-powered property valuation\n      const response = await this.simulatePropertyValuation(propertyData);\n      return response;\n    } catch (error) {\n      console.error('Error getting property valuation:', error);\n      throw new Error('Failed to get property valuation');\n    }\n  }\n\n  // Get location insights and analytics\n  async getLocationInsights(location: string): Promise<LocationInsights> {\n    try {\n      const response = await this.simulateLocationInsights(location);\n      return response;\n    } catch (error) {\n      console.error('Error fetching location insights:', error);\n      throw new Error('Failed to fetch location insights');\n    }\n  }\n\n  // Score leads using AI\n  async scoreLeads(leadData: Array<{\n    id: string;\n    budget: number;\n    location: string;\n    propertyType: string;\n    urgency: string;\n    contactHistory: number;\n  }>): Promise<LeadScore[]> {\n    try {\n      const scores = await Promise.all(\n        leadData.map(lead => this.simulateLeadScoring(lead))\n      );\n      return scores;\n    } catch (error) {\n      console.error('Error scoring leads:', error);\n      throw new Error('Failed to score leads');\n    }\n  }\n\n  // Generate market insights using AI\n  async generateMarketInsightsReport(location: string, timeframe: string = '30d'): Promise<{\n    insights: string[];\n    predictions: Array<{\n      metric: string;\n      currentValue: number;\n      predictedValue: number;\n      confidence: number;\n      timeframe: string;\n    }>;\n    recommendations: string[];\n  }> {\n    try {\n      return await this.simulateMarketInsights(location, timeframe);\n    } catch (error) {\n      console.error('Error generating market insights:', error);\n      throw new Error('Failed to generate market insights');\n    }\n  }\n\n  // Private methods to simulate AI responses (replace with actual NVAPI calls)\n  private async simulateMarketData(location: string, propertyType?: string): Promise<MarketTrend> {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const basePrice = this.getBasePriceForLocation(location);\n    const variation = (Math.random() - 0.5) * 0.1; // ±5% variation\n    \n    return {\n      location,\n      averagePrice: Math.round(basePrice * (1 + variation)),\n      priceChange: Math.round(basePrice * variation * 0.1),\n      priceChangePercent: Number((variation * 10).toFixed(2)),\n      inventory: Math.round(Math.random() * 500 + 100),\n      daysOnMarket: Math.round(Math.random() * 60 + 20),\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  private async simulatePropertyValuation(propertyData: any): Promise<PropertyValuation> {\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    \n    const baseValue = this.calculateBaseValue(propertyData);\n    const confidence = Math.random() * 0.3 + 0.7; // 70-100% confidence\n    \n    return {\n      propertyId: `prop_${Date.now()}`,\n      estimatedValue: Math.round(baseValue),\n      confidence: Number(confidence.toFixed(2)),\n      comparables: this.generateComparables(propertyData, 5),\n      marketTrends: await this.simulateMarketData(propertyData.address),\n    };\n  }\n\n  private async simulateLocationInsights(location: string): Promise<LocationInsights> {\n    await new Promise(resolve => setTimeout(resolve, 1200));\n    \n    return {\n      location,\n      walkScore: Math.round(Math.random() * 40 + 60), // 60-100\n      crimeRate: Number((Math.random() * 5 + 1).toFixed(1)), // 1-6 per 1000\n      schoolRating: Number((Math.random() * 3 + 7).toFixed(1)), // 7-10\n      amenities: [\n        'Shopping Centers', 'Parks', 'Public Transit', 'Restaurants',\n        'Schools', 'Healthcare', 'Entertainment', 'Fitness Centers'\n      ].slice(0, Math.round(Math.random() * 4 + 4)),\n      demographics: {\n        medianIncome: Math.round(Math.random() * 50000 + 50000),\n        populationGrowth: Number((Math.random() * 4 + 1).toFixed(1)),\n        ageDistribution: {\n          '18-34': Math.round(Math.random() * 15 + 20),\n          '35-54': Math.round(Math.random() * 15 + 25),\n          '55+': Math.round(Math.random() * 15 + 20),\n        },\n      },\n      futureGrowthPotential: Number((Math.random() * 30 + 70).toFixed(1)),\n    };\n  }\n\n  private async simulateLeadScoring(leadData: any): Promise<LeadScore> {\n    await new Promise(resolve => setTimeout(resolve, 800));\n    \n    const budgetScore = Math.min(leadData.budget / 100000, 1) * 30;\n    const urgencyScore = leadData.urgency === 'high' ? 25 : leadData.urgency === 'medium' ? 15 : 5;\n    const engagementScore = Math.min(leadData.contactHistory * 5, 25);\n    const locationScore = Math.random() * 20;\n    \n    const totalScore = Math.round(budgetScore + urgencyScore + engagementScore + locationScore);\n    \n    return {\n      leadId: leadData.id,\n      score: totalScore,\n      factors: [\n        { factor: 'Budget', impact: budgetScore, description: 'Lead budget relative to market' },\n        { factor: 'Urgency', impact: urgencyScore, description: 'Timeline for purchase/sale' },\n        { factor: 'Engagement', impact: engagementScore, description: 'Communication frequency' },\n        { factor: 'Location Match', impact: locationScore, description: 'Location preference alignment' },\n      ],\n      recommendations: this.generateLeadRecommendations(totalScore),\n    };\n  }\n\n  private async simulateMarketInsights(location: string, timeframe: string) {\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    return {\n      insights: [\n        `${location} market shows strong buyer demand with inventory down 15% from last month`,\n        'Average days on market decreased by 8 days, indicating faster sales',\n        'Price appreciation trending upward with 3.2% increase over last quarter',\n        'New construction permits up 22%, suggesting future supply increase',\n      ],\n      predictions: [\n        {\n          metric: 'Average Price',\n          currentValue: 425000,\n          predictedValue: 441000,\n          confidence: 0.85,\n          timeframe: '3 months',\n        },\n        {\n          metric: 'Days on Market',\n          currentValue: 28,\n          predictedValue: 24,\n          confidence: 0.78,\n          timeframe: '3 months',\n        },\n        {\n          metric: 'Inventory',\n          currentValue: 245,\n          predictedValue: 280,\n          confidence: 0.72,\n          timeframe: '3 months',\n        },\n      ],\n      recommendations: [\n        'Consider pricing competitively due to high demand',\n        'Prepare for faster closing timelines',\n        'Focus on move-in ready properties for best results',\n        'Monitor new construction impact on pricing',\n      ],\n    };\n  }\n\n  // Helper methods\n  private getBasePriceForLocation(location: string): number {\n    const locationPrices: Record<string, number> = {\n      'chicago': 350000,\n      'naperville': 425000,\n      'schaumburg': 380000,\n      'evanston': 450000,\n      'oak_park': 400000,\n    };\n    \n    const key = location.toLowerCase().replace(/\\s+/g, '_');\n    return locationPrices[key] || 375000;\n  }\n\n  private calculateBaseValue(propertyData: any): number {\n    const basePrice = this.getBasePriceForLocation(propertyData.address);\n    const sqftValue = propertyData.sqft * 150; // $150 per sqft base\n    const bedroomValue = propertyData.bedrooms * 15000;\n    const bathroomValue = propertyData.bathrooms * 10000;\n    const ageAdjustment = Math.max(0, 1 - (2024 - propertyData.yearBuilt) * 0.005);\n    \n    return (sqftValue + bedroomValue + bathroomValue) * ageAdjustment;\n  }\n\n  private generateComparables(propertyData: any, count: number) {\n    const comparables = [];\n    for (let i = 0; i < count; i++) {\n      const variation = (Math.random() - 0.5) * 0.3; // ±15% variation\n      comparables.push({\n        address: `${Math.floor(Math.random() * 9999)} Comparable St`,\n        price: Math.round(this.calculateBaseValue(propertyData) * (1 + variation)),\n        sqft: Math.round(propertyData.sqft * (1 + variation * 0.5)),\n        bedrooms: propertyData.bedrooms + Math.floor(Math.random() * 3 - 1),\n        bathrooms: propertyData.bathrooms + Math.floor(Math.random() * 2 - 0.5),\n        distance: Number((Math.random() * 2 + 0.1).toFixed(1)),\n      });\n    }\n    return comparables;\n  }\n\n  private generateLeadRecommendations(score: number): string[] {\n    if (score >= 80) {\n      return [\n        'High priority lead - contact immediately',\n        'Schedule property viewing within 24 hours',\n        'Prepare pre-approval documentation',\n        'Assign dedicated agent for personalized service',\n      ];\n    } else if (score >= 60) {\n      return [\n        'Medium priority lead - follow up within 48 hours',\n        'Send curated property listings',\n        'Schedule phone consultation',\n        'Provide market insights and trends',\n      ];\n    } else {\n      return [\n        'Nurture lead with regular market updates',\n        'Send educational content about buying/selling process',\n        'Check in monthly to assess changing needs',\n        'Provide general market information',\n      ];\n    }\n  }\n\n  // Enhanced messaging features with AI integration\n  async generateLandAnalysisResponse(message: string, context: ConversationContext): Promise<LandAnalysisResponse> {\n    try {\n      // Parse the message for location and property details\n      const locationMatch = this.extractLocationFromMessage(message);\n      const propertyDetails = this.extractPropertyDetailsFromMessage(message);\n      \n      // Simulate comprehensive land analysis using AI\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      const overallScore = Math.random() * 40 + 60; // 60-100 score\n      const confidenceLevel = Math.random() * 0.3 + 0.7; // 70-100% confidence\n      \n      return {\n        analysisId: `analysis_${Date.now()}`,\n        location: locationMatch || 'Property Location',\n        overallScore: Number(overallScore.toFixed(1)),\n        recommendation: overallScore >= 80 ? 'buy' : overallScore >= 65 ? 'hold' : 'avoid',\n        confidenceLevel: Number(confidenceLevel.toFixed(2)),\n        keyFactors: this.generateKeyFactors(overallScore),\n        marketInsights: this.generateMarketInsightsArray(locationMatch || 'area'),\n        riskFactors: this.generateRiskFactors(),\n        opportunities: this.generateOpportunities(),\n        predictedValueChange: {\n          oneYear: Number((Math.random() * 10 - 2).toFixed(1)), // -2% to +8%\n          threeYear: Number((Math.random() * 20 + 5).toFixed(1)), // +5% to +25%\n          fiveYear: Number((Math.random() * 35 + 15).toFixed(1)), // +15% to +50%\n        },\n        comparable_properties: this.generateComparableProperties()\n      };\n    } catch (error) {\n      console.error('Error generating land analysis:', error);\n      throw new Error('Failed to generate land analysis');\n    }\n  }\n\n  async enhanceMessage(message: string, context: ConversationContext): Promise<MessageEnhancement> {\n    try {\n      const hasLandAnalysisKeywords = /\\b(location|area|neighborhood|analysis|score|rating|investment|risk)\\b/i.test(message);\n      const hasPriceAnalysisKeywords = /\\b(price|value|cost|market|trend|appreciation|comparable)\\b/i.test(message);\n      const hasMarketTrendsKeywords = /\\b(market|trend|forecast|prediction|growth|demand|supply)\\b/i.test(message);\n      \n      const suggestedResponses = this.generateSuggestedResponses(message, context);\n      const relevantProperties = context.propertyId ? await this.getRelevantProperties(context.propertyId) : undefined;\n      \n      return {\n        hasLandAnalysis: hasLandAnalysisKeywords,\n        hasPriceAnalysis: hasPriceAnalysisKeywords,\n        hasMarketTrends: hasMarketTrendsKeywords,\n        suggestedResponses,\n        relevantProperties\n      };\n    } catch (error) {\n      console.error('Error enhancing message:', error);\n      return {\n        hasLandAnalysis: false,\n        hasPriceAnalysis: false,\n        hasMarketTrends: false\n      };\n    }\n  }\n\n  async generateConversationResponse(message: string, context: ConversationContext): Promise<string> {\n    try {\n      // Simulate AI conversation response based on user role and context\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      \n      const responses = this.getRoleBasedResponses(context.userRole, message, context);\n      return responses[Math.floor(Math.random() * responses.length)];\n    } catch (error) {\n      console.error('Error generating conversation response:', error);\n      throw new Error('Failed to generate response');\n    }\n  }\n\n  private extractLocationFromMessage(message: string): string | null {\n    const locationPatterns = [\n      /in\\s+([A-Za-z\\s,]+)(?=\\s|$|[.!?])/i,\n      /at\\s+([A-Za-z\\s,]+)(?=\\s|$|[.!?])/i,\n      /([A-Za-z\\s,]+),\\s*(IL|Illinois)/i\n    ];\n    \n    for (const pattern of locationPatterns) {\n      const match = message.match(pattern);\n      if (match) {\n        return match[1].trim();\n      }\n    }\n    \n    return null;\n  }\n\n  private extractPropertyDetailsFromMessage(message: string): any {\n    const details: any = {};\n    \n    const bedroomMatch = message.match(/(\\d+)\\s*(?:bed|bedroom)/i);\n    if (bedroomMatch) details.bedrooms = parseInt(bedroomMatch[1]);\n    \n    const bathroomMatch = message.match(/(\\d+(?:\\.\\d+)?)\\s*(?:bath|bathroom)/i);\n    if (bathroomMatch) details.bathrooms = parseFloat(bathroomMatch[1]);\n    \n    const sqftMatch = message.match(/(\\d+(?:,\\d+)?)\\s*(?:sq\\s*ft|sqft|square\\s*feet)/i);\n    if (sqftMatch) details.sqft = parseInt(sqftMatch[1].replace(',', ''));\n    \n    return details;\n  }\n\n  private generateKeyFactors(overallScore: number): Array<{factor: string; score: number; impact: 'positive' | 'negative' | 'neutral'; description: string}> {\n    const factors = [\n      { factor: 'Safety & Crime Rate', score: Math.random() * 30 + 70, impact: 'positive', description: 'Low crime rate with good police response times' },\n      { factor: 'School Quality', score: Math.random() * 25 + 75, impact: 'positive', description: 'Highly rated schools in the district' },\n      { factor: 'Market Trends', score: Math.random() * 40 + 60, impact: 'positive', description: 'Steady price appreciation over past 3 years' },\n      { factor: 'Transportation', score: Math.random() * 35 + 65, impact: 'positive', description: 'Good public transit and highway access' },\n      { factor: 'Amenities', score: Math.random() * 30 + 70, impact: 'positive', description: 'Shopping, dining, and recreation nearby' },\n      { factor: 'Future Development', score: Math.random() * 50 + 50, impact: 'neutral', description: 'Planned infrastructure improvements' }\n    ] as Array<{factor: string; score: number; impact: 'positive' | 'negative' | 'neutral'; description: string}>;\n    \n    return factors.map(f => ({\n      ...f,\n      score: Number(f.score.toFixed(1)),\n      impact: (f.score >= 75 ? 'positive' : f.score >= 60 ? 'neutral' : 'negative') as 'positive' | 'negative' | 'neutral'\n    })).slice(0, 4);\n  }\n\n  private generateMarketInsightsArray(location: string): string[] {\n    return [\n      `${location} has shown 8.2% price appreciation over the past year`,\n      'Inventory levels are 23% below historical averages, indicating strong demand',\n      'Average days on market decreased to 18 days, down from 32 days last year',\n      'New construction permits increased by 15%, suggesting growing neighborhood interest',\n      'Rental yields in the area average 6.8%, attractive for investment properties'\n    ];\n  }\n\n  private generateRiskFactors(): string[] {\n    return [\n      'Property taxes may increase due to rising assessed values',\n      'Traffic congestion during peak hours on main roads',\n      'Limited parking availability in downtown areas',\n      'Seasonal flooding risk in low-lying areas during heavy rains'\n    ];\n  }\n\n  private generateOpportunities(): string[] {\n    return [\n      'Upcoming transit expansion will improve connectivity',\n      'New shopping center development planned within 2 miles',\n      'Strong job growth in tech sector driving housing demand',\n      'Renovation potential to increase property value by 15-20%'\n    ];\n  }\n\n  private generateComparableProperties(): Array<{address: string; price: number; score: number; distance: number}> {\n    return [\n      { address: '1234 Maple Street', price: 425000, score: 87.5, distance: 0.3 },\n      { address: '5678 Oak Avenue', price: 445000, score: 91.2, distance: 0.7 },\n      { address: '9012 Pine Road', price: 398000, score: 82.8, distance: 1.1 },\n      { address: '3456 Elm Drive', price: 465000, score: 89.6, distance: 0.9 }\n    ];\n  }\n\n  private generateSuggestedResponses(message: string, context: ConversationContext): string[] {\n    const baseResponses = [\n      'Would you like me to provide a detailed market analysis for this area?',\n      'I can share recent comparable sales data if that would be helpful.',\n      'Let me know if you\\'d like to schedule a property viewing.',\n      'I can provide more information about the neighborhood amenities.'\n    ];\n    \n    if (context.userRole === 'buyer_agent' || context.userRole === 'seller_agent') {\n      return [\n        ...baseResponses,\n        'I can prepare a comprehensive CMA for your client.',\n        'Would you like me to run financing scenarios?',\n        'I can provide investment analysis for this property.'\n      ];\n    }\n    \n    return baseResponses;\n  }\n\n  private async getRelevantProperties(propertyId: number): Promise<Array<{id: number; title: string; price: number; score: number}>> {\n    // Simulate API call to get relevant properties\n    return [\n      { id: 1, title: 'Beautiful 3BR Home in Naperville', price: 425000, score: 87.5 },\n      { id: 2, title: 'Modern 4BR House in Schaumburg', price: 465000, score: 91.2 },\n      { id: 3, title: 'Charming 2BR Condo in Evanston', price: 298000, score: 82.8 }\n    ];\n  }\n\n  private getRoleBasedResponses(userRole: string, message: string, context: ConversationContext): string[] {\n    const responses: Record<string, string[]> = {\n      buyer: [\n        'I understand you\\'re interested in this property. Let me provide you with a comprehensive analysis.',\n        'Based on current market conditions, this could be a good opportunity. Here\\'s what the data shows...',\n        'I\\'ve analyzed the neighborhood factors and market trends for you.'\n      ],\n      seller: [\n        'I can help you understand your property\\'s market position and pricing strategy.',\n        'Let me provide you with a detailed market analysis to optimize your listing.',\n        'Based on recent sales data, here\\'s what I recommend for your property.'\n      ],\n      buyer_agent: [\n        'I\\'ve prepared a comprehensive analysis for your client. Here are the key findings...',\n        'The market data suggests this could be a strong opportunity for your buyer.',\n        'I can provide additional comps and market insights for your client presentation.'\n      ],\n      seller_agent: [\n        'I can help you prepare a competitive market analysis for your seller.',\n        'The current market trends favor sellers in this area. Here\\'s the data...',\n        'I\\'ve analyzed comparable sales to help you price this listing competitively.'\n      ]\n    };\n    \n    return responses[userRole] || responses.buyer;\n  }\n}\n\n// Export singleton instance\nexport const nvapiService = new NVAPIService();\nexport default nvapiService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}