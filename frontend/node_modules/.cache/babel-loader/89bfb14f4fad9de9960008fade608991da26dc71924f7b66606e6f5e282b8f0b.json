{"ast":null,"code":"import _objectSpread from\"D:/py/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useState,useEffect}from'react';import{toast}from'react-toastify';import{authAPI}from'../services/api';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);// Check if user is logged in on app start\nuseEffect(()=>{const checkAuth=async()=>{const token=localStorage.getItem('access_token');if(token){try{const userData=await authAPI.getCurrentUser();setUser(userData);}catch(error){// Token is invalid, remove it\nlocalStorage.removeItem('access_token');console.error('Auth check failed:',error);}}setLoading(false);};checkAuth();},[]);const login=async(username,password)=>{try{setLoading(true);const response=await authAPI.login(username,password);// Store token\nlocalStorage.setItem('access_token',response.access_token);// Get user data\nconst userData=await authAPI.getCurrentUser();setUser(userData);toast.success('Login successful!');return true;}catch(error){var _error$response,_error$response$data;const message=((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.detail)||'Login failed';toast.error(message);return false;}finally{setLoading(false);}};const register=async registrationData=>{try{setLoading(true);await authAPI.register(registrationData);// Auto-login after registration\nconst loginSuccess=await login(registrationData.username,registrationData.password);if(loginSuccess){toast.success('Registration successful! Welcome!');}return loginSuccess;}catch(error){var _error$response2,_error$response2$data;const message=((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.detail)||'Registration failed';toast.error(message);return false;}finally{setLoading(false);}};const logout=()=>{localStorage.removeItem('access_token');setUser(null);toast.info('Logged out successfully');};const updateUser=userData=>{if(user){setUser(_objectSpread(_objectSpread({},user),userData));}};const value={user,loading,login,register,logout,updateUser};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}