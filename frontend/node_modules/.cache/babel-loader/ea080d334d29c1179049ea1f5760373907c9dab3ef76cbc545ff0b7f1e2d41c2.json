{"ast":null,"code":"var _jsxFileName = \"D:\\\\py\\\\frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport { authAPI } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Check if user is logged in on app start\n  useEffect(() => {\n    const checkAuth = async () => {\n      const token = localStorage.getItem('access_token');\n      if (token) {\n        try {\n          const userData = await authAPI.getCurrentUser();\n          setUser(userData);\n        } catch (error) {\n          // Token is invalid, remove it\n          localStorage.removeItem('access_token');\n          console.error('Auth check failed:', error);\n        }\n      }\n      setLoading(false);\n    };\n    checkAuth();\n  }, []);\n  const login = async (username, password) => {\n    try {\n      setLoading(true);\n      const response = await authAPI.login(username, password);\n\n      // Store token\n      localStorage.setItem('access_token', response.access_token);\n\n      // Get user data\n      const userData = await authAPI.getCurrentUser();\n      setUser(userData);\n      toast.success('Login successful!');\n      return true;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || 'Login failed';\n      toast.error(message);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const register = async registrationData => {\n    try {\n      setLoading(true);\n      await authAPI.register(registrationData);\n\n      // Auto-login after registration\n      const loginSuccess = await login(registrationData.username, registrationData.password);\n      if (loginSuccess) {\n        toast.success('Registration successful! Welcome!');\n      }\n      return loginSuccess;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const message = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.detail) || 'Registration failed';\n      toast.error(message);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('access_token');\n    setUser(null);\n    toast.info('Logged out successfully');\n  };\n  const updateUser = userData => {\n    if (user) {\n      setUser({\n        ...user,\n        ...userData\n      });\n    }\n  };\n  const value = {\n    user,\n    loading,\n    login,\n    register,\n    logout,\n    updateUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","toast","authAPI","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","checkAuth","token","localStorage","getItem","userData","getCurrentUser","error","removeItem","console","login","username","password","response","setItem","access_token","success","_error$response","_error$response$data","message","data","detail","register","registrationData","loginSuccess","_error$response2","_error$response2$data","logout","info","updateUser","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/py/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { toast } from 'react-toastify';\nimport { authAPI } from '../services/api';\n\ninterface User {\n  id: number;\n  email: string;\n  username: string;\n  user_role: 'buyer' | 'seller' | 'buyer_agent' | 'seller_agent';\n  first_name?: string;\n  last_name?: string;\n  phone?: string;\n  company_name?: string;\n  license_number?: string;\n  bio?: string;\n  is_active: boolean;\n  is_admin: boolean;\n  created_at: string;\n  subscription_plan: 'free' | 'basic' | 'pro' | 'premium';\n  subscription_expires_at?: string;\n  profile_image_url?: string;\n  commission_rate?: number;\n  years_experience?: number;\n  specializations?: string[];\n  service_areas?: string[];\n  subscription_status: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  login: (username: string, password: string) => Promise<boolean>;\n  register: (registrationData: {\n    email: string;\n    username: string;\n    password: string;\n    user_role?: 'buyer' | 'seller' | 'buyer_agent' | 'seller_agent';\n    first_name?: string;\n    last_name?: string;\n    company_name?: string;\n    license_number?: string;\n  }) => Promise<boolean>;\n  logout: () => void;\n  updateUser: (userData: Partial<User>) => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  // Check if user is logged in on app start\n  useEffect(() => {\n    const checkAuth = async () => {\n      const token = localStorage.getItem('access_token');\n      if (token) {\n        try {\n          const userData = await authAPI.getCurrentUser();\n          setUser(userData);\n        } catch (error) {\n          // Token is invalid, remove it\n          localStorage.removeItem('access_token');\n          console.error('Auth check failed:', error);\n        }\n      }\n      setLoading(false);\n    };\n\n    checkAuth();\n  }, []);\n\n  const login = async (username: string, password: string): Promise<boolean> => {\n    try {\n      setLoading(true);\n      const response = await authAPI.login(username, password);\n      \n      // Store token\n      localStorage.setItem('access_token', response.access_token);\n      \n      // Get user data\n      const userData = await authAPI.getCurrentUser();\n      setUser(userData);\n      \n      toast.success('Login successful!');\n      return true;\n    } catch (error: any) {\n      const message = error.response?.data?.detail || 'Login failed';\n      toast.error(message);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const register = async (registrationData: {\n    email: string;\n    username: string;\n    password: string;\n    user_role?: 'buyer' | 'seller' | 'buyer_agent' | 'seller_agent';\n    first_name?: string;\n    last_name?: string;\n    company_name?: string;\n    license_number?: string;\n  }): Promise<boolean> => {\n    try {\n      setLoading(true);\n      await authAPI.register(registrationData);\n\n      // Auto-login after registration\n      const loginSuccess = await login(registrationData.username, registrationData.password);\n\n      if (loginSuccess) {\n        toast.success('Registration successful! Welcome!');\n      }\n\n      return loginSuccess;\n    } catch (error: any) {\n      const message = error.response?.data?.detail || 'Registration failed';\n      toast.error(message);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('access_token');\n    setUser(null);\n    toast.info('Logged out successfully');\n  };\n\n  const updateUser = (userData: Partial<User>) => {\n    if (user) {\n      setUser({ ...user, ...userData });\n    }\n  };\n\n  const value: AuthContextType = {\n    user,\n    loading,\n    login,\n    register,\n    logout,\n    updateUser,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}