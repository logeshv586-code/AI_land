{"ast":null,"code":"import axios from 'axios';\n\n// NVAPI Configuration\nconst NVAPI_BASE_URL = 'https://api.nvidia.com/v1';\nconst NVAPI_KEY = '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';\n\n// Create axios instance for NVAPI\nconst nvapiClient = axios.create({\n  baseURL: NVAPI_BASE_URL,\n  headers: {\n    'Authorization': `Bearer ${NVAPI_KEY}`,\n    'Content-Type': 'application/json'\n  },\n  timeout: 30000\n});\n\n// Types for NVAPI responses\n\n// NVAPI Service Class\nclass NVAPIService {\n  // Get real-time market trends for a location\n  async getMarketTrends(location, propertyType) {\n    try {\n      // Since NVAPI doesn't have direct real estate endpoints, we'll simulate\n      // the data structure that would come from a real estate AI API\n      const response = await this.simulateMarketData(location, propertyType);\n      return response;\n    } catch (error) {\n      console.error('Error fetching market trends:', error);\n      throw new Error('Failed to fetch market trends');\n    }\n  }\n\n  // Get property valuation using AI\n  async getPropertyValuation(propertyData) {\n    try {\n      // Simulate AI-powered property valuation\n      const response = await this.simulatePropertyValuation(propertyData);\n      return response;\n    } catch (error) {\n      console.error('Error getting property valuation:', error);\n      throw new Error('Failed to get property valuation');\n    }\n  }\n\n  // Get location insights and analytics\n  async getLocationInsights(location) {\n    try {\n      const response = await this.simulateLocationInsights(location);\n      return response;\n    } catch (error) {\n      console.error('Error fetching location insights:', error);\n      throw new Error('Failed to fetch location insights');\n    }\n  }\n\n  // Score leads using AI\n  async scoreLeads(leadData) {\n    try {\n      const scores = await Promise.all(leadData.map(lead => this.simulateLeadScoring(lead)));\n      return scores;\n    } catch (error) {\n      console.error('Error scoring leads:', error);\n      throw new Error('Failed to score leads');\n    }\n  }\n\n  // Generate market insights using AI\n  async generateMarketInsights(location, timeframe = '30d') {\n    try {\n      return await this.simulateMarketInsights(location, timeframe);\n    } catch (error) {\n      console.error('Error generating market insights:', error);\n      throw new Error('Failed to generate market insights');\n    }\n  }\n\n  // Private methods to simulate AI responses (replace with actual NVAPI calls)\n  async simulateMarketData(location, propertyType) {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    const basePrice = this.getBasePriceForLocation(location);\n    const variation = (Math.random() - 0.5) * 0.1; // ±5% variation\n\n    return {\n      location,\n      averagePrice: Math.round(basePrice * (1 + variation)),\n      priceChange: Math.round(basePrice * variation * 0.1),\n      priceChangePercent: Number((variation * 10).toFixed(2)),\n      inventory: Math.round(Math.random() * 500 + 100),\n      daysOnMarket: Math.round(Math.random() * 60 + 20),\n      timestamp: new Date().toISOString()\n    };\n  }\n  async simulatePropertyValuation(propertyData) {\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    const baseValue = this.calculateBaseValue(propertyData);\n    const confidence = Math.random() * 0.3 + 0.7; // 70-100% confidence\n\n    return {\n      propertyId: `prop_${Date.now()}`,\n      estimatedValue: Math.round(baseValue),\n      confidence: Number(confidence.toFixed(2)),\n      comparables: this.generateComparables(propertyData, 5),\n      marketTrends: await this.simulateMarketData(propertyData.address)\n    };\n  }\n  async simulateLocationInsights(location) {\n    await new Promise(resolve => setTimeout(resolve, 1200));\n    return {\n      location,\n      walkScore: Math.round(Math.random() * 40 + 60),\n      // 60-100\n      crimeRate: Number((Math.random() * 5 + 1).toFixed(1)),\n      // 1-6 per 1000\n      schoolRating: Number((Math.random() * 3 + 7).toFixed(1)),\n      // 7-10\n      amenities: ['Shopping Centers', 'Parks', 'Public Transit', 'Restaurants', 'Schools', 'Healthcare', 'Entertainment', 'Fitness Centers'].slice(0, Math.round(Math.random() * 4 + 4)),\n      demographics: {\n        medianIncome: Math.round(Math.random() * 50000 + 50000),\n        populationGrowth: Number((Math.random() * 4 + 1).toFixed(1)),\n        ageDistribution: {\n          '18-34': Math.round(Math.random() * 15 + 20),\n          '35-54': Math.round(Math.random() * 15 + 25),\n          '55+': Math.round(Math.random() * 15 + 20)\n        }\n      },\n      futureGrowthPotential: Number((Math.random() * 30 + 70).toFixed(1))\n    };\n  }\n  async simulateLeadScoring(leadData) {\n    await new Promise(resolve => setTimeout(resolve, 800));\n    const budgetScore = Math.min(leadData.budget / 100000, 1) * 30;\n    const urgencyScore = leadData.urgency === 'high' ? 25 : leadData.urgency === 'medium' ? 15 : 5;\n    const engagementScore = Math.min(leadData.contactHistory * 5, 25);\n    const locationScore = Math.random() * 20;\n    const totalScore = Math.round(budgetScore + urgencyScore + engagementScore + locationScore);\n    return {\n      leadId: leadData.id,\n      score: totalScore,\n      factors: [{\n        factor: 'Budget',\n        impact: budgetScore,\n        description: 'Lead budget relative to market'\n      }, {\n        factor: 'Urgency',\n        impact: urgencyScore,\n        description: 'Timeline for purchase/sale'\n      }, {\n        factor: 'Engagement',\n        impact: engagementScore,\n        description: 'Communication frequency'\n      }, {\n        factor: 'Location Match',\n        impact: locationScore,\n        description: 'Location preference alignment'\n      }],\n      recommendations: this.generateLeadRecommendations(totalScore)\n    };\n  }\n  async simulateMarketInsights(location, timeframe) {\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    return {\n      insights: [`${location} market shows strong buyer demand with inventory down 15% from last month`, 'Average days on market decreased by 8 days, indicating faster sales', 'Price appreciation trending upward with 3.2% increase over last quarter', 'New construction permits up 22%, suggesting future supply increase'],\n      predictions: [{\n        metric: 'Average Price',\n        currentValue: 425000,\n        predictedValue: 441000,\n        confidence: 0.85,\n        timeframe: '3 months'\n      }, {\n        metric: 'Days on Market',\n        currentValue: 28,\n        predictedValue: 24,\n        confidence: 0.78,\n        timeframe: '3 months'\n      }, {\n        metric: 'Inventory',\n        currentValue: 245,\n        predictedValue: 280,\n        confidence: 0.72,\n        timeframe: '3 months'\n      }],\n      recommendations: ['Consider pricing competitively due to high demand', 'Prepare for faster closing timelines', 'Focus on move-in ready properties for best results', 'Monitor new construction impact on pricing']\n    };\n  }\n\n  // Helper methods\n  getBasePriceForLocation(location) {\n    const locationPrices = {\n      'chicago': 350000,\n      'naperville': 425000,\n      'schaumburg': 380000,\n      'evanston': 450000,\n      'oak_park': 400000\n    };\n    const key = location.toLowerCase().replace(/\\s+/g, '_');\n    return locationPrices[key] || 375000;\n  }\n  calculateBaseValue(propertyData) {\n    const basePrice = this.getBasePriceForLocation(propertyData.address);\n    const sqftValue = propertyData.sqft * 150; // $150 per sqft base\n    const bedroomValue = propertyData.bedrooms * 15000;\n    const bathroomValue = propertyData.bathrooms * 10000;\n    const ageAdjustment = Math.max(0, 1 - (2024 - propertyData.yearBuilt) * 0.005);\n    return (sqftValue + bedroomValue + bathroomValue) * ageAdjustment;\n  }\n  generateComparables(propertyData, count) {\n    const comparables = [];\n    for (let i = 0; i < count; i++) {\n      const variation = (Math.random() - 0.5) * 0.3; // ±15% variation\n      comparables.push({\n        address: `${Math.floor(Math.random() * 9999)} Comparable St`,\n        price: Math.round(this.calculateBaseValue(propertyData) * (1 + variation)),\n        sqft: Math.round(propertyData.sqft * (1 + variation * 0.5)),\n        bedrooms: propertyData.bedrooms + Math.floor(Math.random() * 3 - 1),\n        bathrooms: propertyData.bathrooms + Math.floor(Math.random() * 2 - 0.5),\n        distance: Number((Math.random() * 2 + 0.1).toFixed(1))\n      });\n    }\n    return comparables;\n  }\n  generateLeadRecommendations(score) {\n    if (score >= 80) {\n      return ['High priority lead - contact immediately', 'Schedule property viewing within 24 hours', 'Prepare pre-approval documentation', 'Assign dedicated agent for personalized service'];\n    } else if (score >= 60) {\n      return ['Medium priority lead - follow up within 48 hours', 'Send curated property listings', 'Schedule phone consultation', 'Provide market insights and trends'];\n    } else {\n      return ['Nurture lead with regular market updates', 'Send educational content about buying/selling process', 'Check in monthly to assess changing needs', 'Provide general market information'];\n    }\n  }\n}\n\n// Export singleton instance\nexport const nvapiService = new NVAPIService();\nexport default nvapiService;","map":{"version":3,"names":["axios","NVAPI_BASE_URL","NVAPI_KEY","nvapiClient","create","baseURL","headers","timeout","NVAPIService","getMarketTrends","location","propertyType","response","simulateMarketData","error","console","Error","getPropertyValuation","propertyData","simulatePropertyValuation","getLocationInsights","simulateLocationInsights","scoreLeads","leadData","scores","Promise","all","map","lead","simulateLeadScoring","generateMarketInsights","timeframe","simulateMarketInsights","resolve","setTimeout","basePrice","getBasePriceForLocation","variation","Math","random","averagePrice","round","priceChange","priceChangePercent","Number","toFixed","inventory","daysOnMarket","timestamp","Date","toISOString","baseValue","calculateBaseValue","confidence","propertyId","now","estimatedValue","comparables","generateComparables","marketTrends","address","walkScore","crimeRate","schoolRating","amenities","slice","demographics","medianIncome","populationGrowth","ageDistribution","futureGrowthPotential","budgetScore","min","budget","urgencyScore","urgency","engagementScore","contactHistory","locationScore","totalScore","leadId","id","score","factors","factor","impact","description","recommendations","generateLeadRecommendations","insights","predictions","metric","currentValue","predictedValue","locationPrices","key","toLowerCase","replace","sqftValue","sqft","bedroomValue","bedrooms","bathroomValue","bathrooms","ageAdjustment","max","yearBuilt","count","i","push","floor","price","distance","nvapiService"],"sources":["D:/py/frontend/src/services/nvapiService.ts"],"sourcesContent":["import axios, { AxiosResponse } from 'axios';\n\n// NVAPI Configuration\nconst NVAPI_BASE_URL = 'https://api.nvidia.com/v1';\nconst NVAPI_KEY = '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';\n\n// Create axios instance for NVAPI\nconst nvapiClient = axios.create({\n  baseURL: NVAPI_BASE_URL,\n  headers: {\n    'Authorization': `Bearer ${NVAPI_KEY}`,\n    'Content-Type': 'application/json',\n  },\n  timeout: 30000,\n});\n\n// Types for NVAPI responses\nexport interface MarketTrend {\n  location: string;\n  averagePrice: number;\n  priceChange: number;\n  priceChangePercent: number;\n  inventory: number;\n  daysOnMarket: number;\n  timestamp: string;\n}\n\nexport interface PropertyValuation {\n  propertyId: string;\n  estimatedValue: number;\n  confidence: number;\n  comparables: Array<{\n    address: string;\n    price: number;\n    sqft: number;\n    bedrooms: number;\n    bathrooms: number;\n    distance: number;\n  }>;\n  marketTrends: MarketTrend;\n}\n\nexport interface LocationInsights {\n  location: string;\n  walkScore: number;\n  crimeRate: number;\n  schoolRating: number;\n  amenities: string[];\n  demographics: {\n    medianIncome: number;\n    populationGrowth: number;\n    ageDistribution: Record<string, number>;\n  };\n  futureGrowthPotential: number;\n}\n\nexport interface LeadScore {\n  leadId: string;\n  score: number;\n  factors: Array<{\n    factor: string;\n    impact: number;\n    description: string;\n  }>;\n  recommendations: string[];\n}\n\n// NVAPI Service Class\nclass NVAPIService {\n  // Get real-time market trends for a location\n  async getMarketTrends(location: string, propertyType?: string): Promise<MarketTrend> {\n    try {\n      // Since NVAPI doesn't have direct real estate endpoints, we'll simulate\n      // the data structure that would come from a real estate AI API\n      const response = await this.simulateMarketData(location, propertyType);\n      return response;\n    } catch (error) {\n      console.error('Error fetching market trends:', error);\n      throw new Error('Failed to fetch market trends');\n    }\n  }\n\n  // Get property valuation using AI\n  async getPropertyValuation(propertyData: {\n    address: string;\n    sqft: number;\n    bedrooms: number;\n    bathrooms: number;\n    yearBuilt: number;\n    lotSize?: number;\n  }): Promise<PropertyValuation> {\n    try {\n      // Simulate AI-powered property valuation\n      const response = await this.simulatePropertyValuation(propertyData);\n      return response;\n    } catch (error) {\n      console.error('Error getting property valuation:', error);\n      throw new Error('Failed to get property valuation');\n    }\n  }\n\n  // Get location insights and analytics\n  async getLocationInsights(location: string): Promise<LocationInsights> {\n    try {\n      const response = await this.simulateLocationInsights(location);\n      return response;\n    } catch (error) {\n      console.error('Error fetching location insights:', error);\n      throw new Error('Failed to fetch location insights');\n    }\n  }\n\n  // Score leads using AI\n  async scoreLeads(leadData: Array<{\n    id: string;\n    budget: number;\n    location: string;\n    propertyType: string;\n    urgency: string;\n    contactHistory: number;\n  }>): Promise<LeadScore[]> {\n    try {\n      const scores = await Promise.all(\n        leadData.map(lead => this.simulateLeadScoring(lead))\n      );\n      return scores;\n    } catch (error) {\n      console.error('Error scoring leads:', error);\n      throw new Error('Failed to score leads');\n    }\n  }\n\n  // Generate market insights using AI\n  async generateMarketInsights(location: string, timeframe: string = '30d'): Promise<{\n    insights: string[];\n    predictions: Array<{\n      metric: string;\n      currentValue: number;\n      predictedValue: number;\n      confidence: number;\n      timeframe: string;\n    }>;\n    recommendations: string[];\n  }> {\n    try {\n      return await this.simulateMarketInsights(location, timeframe);\n    } catch (error) {\n      console.error('Error generating market insights:', error);\n      throw new Error('Failed to generate market insights');\n    }\n  }\n\n  // Private methods to simulate AI responses (replace with actual NVAPI calls)\n  private async simulateMarketData(location: string, propertyType?: string): Promise<MarketTrend> {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const basePrice = this.getBasePriceForLocation(location);\n    const variation = (Math.random() - 0.5) * 0.1; // ±5% variation\n    \n    return {\n      location,\n      averagePrice: Math.round(basePrice * (1 + variation)),\n      priceChange: Math.round(basePrice * variation * 0.1),\n      priceChangePercent: Number((variation * 10).toFixed(2)),\n      inventory: Math.round(Math.random() * 500 + 100),\n      daysOnMarket: Math.round(Math.random() * 60 + 20),\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  private async simulatePropertyValuation(propertyData: any): Promise<PropertyValuation> {\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    \n    const baseValue = this.calculateBaseValue(propertyData);\n    const confidence = Math.random() * 0.3 + 0.7; // 70-100% confidence\n    \n    return {\n      propertyId: `prop_${Date.now()}`,\n      estimatedValue: Math.round(baseValue),\n      confidence: Number(confidence.toFixed(2)),\n      comparables: this.generateComparables(propertyData, 5),\n      marketTrends: await this.simulateMarketData(propertyData.address),\n    };\n  }\n\n  private async simulateLocationInsights(location: string): Promise<LocationInsights> {\n    await new Promise(resolve => setTimeout(resolve, 1200));\n    \n    return {\n      location,\n      walkScore: Math.round(Math.random() * 40 + 60), // 60-100\n      crimeRate: Number((Math.random() * 5 + 1).toFixed(1)), // 1-6 per 1000\n      schoolRating: Number((Math.random() * 3 + 7).toFixed(1)), // 7-10\n      amenities: [\n        'Shopping Centers', 'Parks', 'Public Transit', 'Restaurants',\n        'Schools', 'Healthcare', 'Entertainment', 'Fitness Centers'\n      ].slice(0, Math.round(Math.random() * 4 + 4)),\n      demographics: {\n        medianIncome: Math.round(Math.random() * 50000 + 50000),\n        populationGrowth: Number((Math.random() * 4 + 1).toFixed(1)),\n        ageDistribution: {\n          '18-34': Math.round(Math.random() * 15 + 20),\n          '35-54': Math.round(Math.random() * 15 + 25),\n          '55+': Math.round(Math.random() * 15 + 20),\n        },\n      },\n      futureGrowthPotential: Number((Math.random() * 30 + 70).toFixed(1)),\n    };\n  }\n\n  private async simulateLeadScoring(leadData: any): Promise<LeadScore> {\n    await new Promise(resolve => setTimeout(resolve, 800));\n    \n    const budgetScore = Math.min(leadData.budget / 100000, 1) * 30;\n    const urgencyScore = leadData.urgency === 'high' ? 25 : leadData.urgency === 'medium' ? 15 : 5;\n    const engagementScore = Math.min(leadData.contactHistory * 5, 25);\n    const locationScore = Math.random() * 20;\n    \n    const totalScore = Math.round(budgetScore + urgencyScore + engagementScore + locationScore);\n    \n    return {\n      leadId: leadData.id,\n      score: totalScore,\n      factors: [\n        { factor: 'Budget', impact: budgetScore, description: 'Lead budget relative to market' },\n        { factor: 'Urgency', impact: urgencyScore, description: 'Timeline for purchase/sale' },\n        { factor: 'Engagement', impact: engagementScore, description: 'Communication frequency' },\n        { factor: 'Location Match', impact: locationScore, description: 'Location preference alignment' },\n      ],\n      recommendations: this.generateLeadRecommendations(totalScore),\n    };\n  }\n\n  private async simulateMarketInsights(location: string, timeframe: string) {\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    return {\n      insights: [\n        `${location} market shows strong buyer demand with inventory down 15% from last month`,\n        'Average days on market decreased by 8 days, indicating faster sales',\n        'Price appreciation trending upward with 3.2% increase over last quarter',\n        'New construction permits up 22%, suggesting future supply increase',\n      ],\n      predictions: [\n        {\n          metric: 'Average Price',\n          currentValue: 425000,\n          predictedValue: 441000,\n          confidence: 0.85,\n          timeframe: '3 months',\n        },\n        {\n          metric: 'Days on Market',\n          currentValue: 28,\n          predictedValue: 24,\n          confidence: 0.78,\n          timeframe: '3 months',\n        },\n        {\n          metric: 'Inventory',\n          currentValue: 245,\n          predictedValue: 280,\n          confidence: 0.72,\n          timeframe: '3 months',\n        },\n      ],\n      recommendations: [\n        'Consider pricing competitively due to high demand',\n        'Prepare for faster closing timelines',\n        'Focus on move-in ready properties for best results',\n        'Monitor new construction impact on pricing',\n      ],\n    };\n  }\n\n  // Helper methods\n  private getBasePriceForLocation(location: string): number {\n    const locationPrices: Record<string, number> = {\n      'chicago': 350000,\n      'naperville': 425000,\n      'schaumburg': 380000,\n      'evanston': 450000,\n      'oak_park': 400000,\n    };\n    \n    const key = location.toLowerCase().replace(/\\s+/g, '_');\n    return locationPrices[key] || 375000;\n  }\n\n  private calculateBaseValue(propertyData: any): number {\n    const basePrice = this.getBasePriceForLocation(propertyData.address);\n    const sqftValue = propertyData.sqft * 150; // $150 per sqft base\n    const bedroomValue = propertyData.bedrooms * 15000;\n    const bathroomValue = propertyData.bathrooms * 10000;\n    const ageAdjustment = Math.max(0, 1 - (2024 - propertyData.yearBuilt) * 0.005);\n    \n    return (sqftValue + bedroomValue + bathroomValue) * ageAdjustment;\n  }\n\n  private generateComparables(propertyData: any, count: number) {\n    const comparables = [];\n    for (let i = 0; i < count; i++) {\n      const variation = (Math.random() - 0.5) * 0.3; // ±15% variation\n      comparables.push({\n        address: `${Math.floor(Math.random() * 9999)} Comparable St`,\n        price: Math.round(this.calculateBaseValue(propertyData) * (1 + variation)),\n        sqft: Math.round(propertyData.sqft * (1 + variation * 0.5)),\n        bedrooms: propertyData.bedrooms + Math.floor(Math.random() * 3 - 1),\n        bathrooms: propertyData.bathrooms + Math.floor(Math.random() * 2 - 0.5),\n        distance: Number((Math.random() * 2 + 0.1).toFixed(1)),\n      });\n    }\n    return comparables;\n  }\n\n  private generateLeadRecommendations(score: number): string[] {\n    if (score >= 80) {\n      return [\n        'High priority lead - contact immediately',\n        'Schedule property viewing within 24 hours',\n        'Prepare pre-approval documentation',\n        'Assign dedicated agent for personalized service',\n      ];\n    } else if (score >= 60) {\n      return [\n        'Medium priority lead - follow up within 48 hours',\n        'Send curated property listings',\n        'Schedule phone consultation',\n        'Provide market insights and trends',\n      ];\n    } else {\n      return [\n        'Nurture lead with regular market updates',\n        'Send educational content about buying/selling process',\n        'Check in monthly to assess changing needs',\n        'Provide general market information',\n      ];\n    }\n  }\n}\n\n// Export singleton instance\nexport const nvapiService = new NVAPIService();\nexport default nvapiService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}